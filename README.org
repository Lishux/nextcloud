#+TITLE: Build nextcloud with a self-signed https in docker

* Requirements

1. ~docker~ and ~docker-compose~

   #+begin_src bash
pacman -S docker docker-compose pwgen
systemctl enable --now docker.service
   #+end_src

2. ~openssl~

* Configuration
:PROPERTIES:
:header-args:bash: :tangle build.sh :file-mode (identity #o755) :shebang #!/usr/bin/env bash
:END:

*Cation!!*
If you run =./build.sh= after =docker-compose up= your certificate will be
updated

tldr: run
#+begin_src bash :tangle no
git clone git@github.com:Lishux/nextcloud.git && cd nextcloud
./build.sh
#+end_src

#+begin_src bash
[ -z "$1" ] || host_ip=xxx && host_ip="$1"
#+end_src
substitute xxx with your host's real ip

create a self-signed certificate in your private directory (=./.private= here)
#+begin_src bash
[ -d ./.private ] || mkdir ./.private/
[ -f ./.private/${host_ip}.key ] || openssl req -x509 -out ./.private/${host_ip}.crt -keyout ./.private/${host_ip}.key \
  -newkey rsa:4096 -nodes -sha256 -days 90\
  -subj '/CN=${host_ip}' -extensions EXT -config <( \
   printf "[dn]\nCN=${host_ip}\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:${host_ip}\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth")
#+end_src
=${host_ip}= is your machine's real ip. For more details see
- [[https://wiki.archlinux.org/title/OpenSSL#Generate_a_self-signed_certificate_with_private_key_in_a_single_command][Generate_a_self-signed_certificate_with_private_key_in_a_single_command]]
- [[https://letsencrypt.org/docs/certificates-for-localhost/#making-and-trusting-your-own-certificates][making-and-trusting-your-own-certificates]].

change =${host_ip}= in ~caddyfile~ to your machine's real ip. Append password
after =MYSQL_ROOT_PASSWORD= in ~docker-compose.yaml~.

FIXME =envsubst= not work properly
#+begin_src bash :tangle no
cat ./templates/Caddyfile | envsubst > Caddyfile
cat ./templates/docker-compose.yaml | envsubst > docker-compose.yaml
#+end_src

see [[https://stackoverflow.com/questions/2914220/bash-templating-how-to-build-configuration-files-from-templates-with-bash][Bash Templating: How to build configuration files from templates with Bash? -...]]
#+begin_src bash
envsub () {
    eval "cat <<EOF
$(<$1)
EOF"
}

envsub ./templates/Caddyfile > Caddyfile
envsub ./templates/docker-compose.yaml > docker-compose.yaml
#+end_src

=./.private/db.env= should have following contents.
#+begin_src bash
[ -f ./.private/db.env ] || cat > ./.private/db.env <<EOF
MYSQL_ROOT_PASSWORD=$(pwgen -c -n -y -s -1 -r \$\#\,)
MYSQL_PASSWORD=$(pwgen -c -n -y -s -1 -r \$\#\,)
MYSQL_DATABASE=nextcloud
MYSQL_USER=nextcloud
EOF
#+end_src

* Usage and maintain

pull and build (or update) with
#+begin_src bash
docker-compose pull
docker-compose build --pull
#+end_src

run with
#+begin_src bash
docker-compose up -d
#+end_src
note that the database and nextcloud files are stored within docker volume, so
don't prune them accidentally.

stop with
#+begin_src bash
docker-compose down
#+end_src

show running containers with
#+begin_src bash
docker-compose ps -a
#+end_src

* Notion

- This is for =proxy header not configured rightly= warning

  Space separated list for =TRUSTED_PROXIES= in ~docker-compose.yml~ may not
  work properly, you may add following entry in
  ~/var/www/html/config/config.php~ in the docker container.
  #+begin_src php
    'trusted_proxies' =>
    array (
      0 => '\'192.168.0.0/16\'',
      1 => '\'172.16.0.0/12\'',
    ),
  #+end_src
