#+TITLE: Build nextcloud with a self-signed https in docker

* Requirements
1. ~docker~ and ~docker-compose~
2. ~openssl~

#+begin_src fish :eval no
pacman -S docker docker-compose pwgen ssl-cert-check
sudo systemctl enable --now docker.service
#+end_src

* Usage
#+begin_src bash :tangle no
git clone git@github.com:Lishux/nextcloud.git && cd nextcloud
./build.sh xxx
#+end_src
substitute =xxx= with your host's real ip

* Details and tangle of =build.sh=
:PROPERTIES:
:header-args:bash: :tangle build.sh :file-mode (identity #o755) :shebang #!/usr/bin/env bash
:END:

#+begin_src bash
[ -z "$1" ] && host_ip=xxx || host_ip="$1"
# if inside GFW
[ -z "$2" ] && proxy= || proxy="host.docker.internal:$2"
#+end_src
~host.docker.internal:$2~ is for share host proxy

check if a certificate file is expire within 10 days
#+begin_src bash
expired () {
  ssl-cert-check -c "$1" -x 10 | awk '{print $2}' | tail -1 | cut -c-5
}
#+end_src
Expired or expiring certificate (after 10 days) begins with "Expir"

create a self-signed certificate in your private directory (=./.private= here)
#+begin_src bash
[ -d ./.private ] || mkdir ./.private/
key_file=./.private/"${host_ip}".crt
[ -f "$key_file" ] && [ "$(expired $key_file)" != "Expir" ] || openssl req -x509 -out ./.private/${host_ip}.crt -keyout ./.private/${host_ip}.key \
  -newkey rsa:4096 -nodes -sha256 -days 90\
  -subj "/CN=${host_ip}" -extensions EXT -config <( \
   printf "[dn]\nCN=${host_ip}\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:${host_ip}\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth")
#+end_src
=${host_ip}= is your machine's real ip. For more details see
[[https://wiki.archlinux.org/title/OpenSSL#Generate_a_self-signed_certificate_with_private_key_in_a_single_command][Generate_a_self-signed_certificate_with_private_key_in_a_single_command]]
[[https://letsencrypt.org/docs/certificates-for-localhost/#making-and-trusting-your-own-certificates][making-and-trusting-your-own-certificates]].

=./.private/db.env= should have following contents.
#+begin_src bash
[ -f ./.private/db.env ] || cat > ./.private/db.env <<EOF
MYSQL_ROOT_PASSWORD=$(pwgen -c -n -y -s -1 -r \$\#\,\&)
MYSQL_PASSWORD=$(pwgen -c -n -y -s -1 -r \$\#\,\&)
MYSQL_DATABASE=nextcloud
MYSQL_USER=nextcloud
REDIS_HOST_PASSWORD=$(pwgen -c -n -y -s -1 -r \$\#\,\&)
EOF
#+end_src

[[https://stackoverflow.com/questions/2914220/bash-templating-how-to-build-configuration-files-from-templates-with-bash][Bash Templating: How to build configuration files from templates with Bash? -...]]
#+begin_src bash
envsub () {
    eval "cat <<EOF
$(<$1)
EOF"
}

. ./.private/db.env

# FIXME try built in =envsubst=
envsub ./templates/Caddyfile > Caddyfile
envsub ./templates/docker-compose.yaml > docker-compose.yaml
#+end_src

* Notion
** "proxy header not configured rightly"

Space separated list for =TRUSTED_PROXIES= in ~docker-compose.yml~ may not work
properly, you may add following entry in ~/var/www/html/config/config.php~ in
the docker container.
#+begin_src php
  'trusted_proxies' =>
  array (
    0 => '\'192.168.0.0/16\'',
    1 => '\'172.16.0.0/12\'',
  ),
#+end_src

** add local external storage
[[https://docs.nextcloud.com/server/25/admin_manual/configuration_files/external_storage/local.html][Local â€” Nextcloud latest Administration Manual latest documentation]]

#+begin_src docker-compose
  volumes:
    - /local/path:/docker/path
#+end_src

** use host proxy
[[https://docs.docker.com/network/proxy/#configure-the-docker-client][Configure Docker to use a proxy server | Docker Docs]]

but this cause all container use proxy, then there's error with =caddy= for
proxy only inside nextcloud app, see [[file:./templates/docker-compose.yaml]]

** Should I use =Redis=
#+begin_quote from GPT-3.5
Caching helps reduce the load on the primary storage and speeds up access to
frequently accessed data. While Redis is fast, it is an in-memory data store,
meaning it stores all data in RAM.
#+end_quote

** =zotero= self signed certificate
[[https://www.zotero.org/support/kb/cert_override][kb:cert override {Zotero Documentation}]]
[[https://github.com/Osmose/firefox-cert-override][GitHub - Osmose/firefox-cert-override: Python library and CLI for reading and...]]

#+begin_src fish
pipx install firefox-cert-override
~/.local/bin/firefox-cert-override xxx:443=xxx.crt[U] > cert_override.txt
#+end_src
